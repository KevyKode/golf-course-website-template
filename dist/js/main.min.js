const API_BASE_URL=window.location.origin.includes("localhost")?"http://localhost:3000/api":`${window.location.origin}/api`;document.addEventListener("DOMContentLoaded",function(){setTimeout(()=>{const loader=document.getElementById("pageLoader");if(loader){loader.classList.add("hidden");setTimeout(()=>{loader.style.display="none"},500)}},1e3);initializeWebsite()});function initializeWebsite(){initializeNavigation();initializeBookingModal();initializeAuthModal();initializeCalendar();initializeContactForm();initializeAnimations();initializeScrollEffects();checkLoginStatus()}function initializeNavigation(){const nav=document.querySelector(".header");const navLinks=document.querySelectorAll(".nav-menu a");navLinks.forEach(link=>{link.addEventListener("click",function(e){e.preventDefault();const targetId=this.getAttribute("href");const targetSection=document.querySelector(targetId);if(targetSection){targetSection.scrollIntoView({behavior:"smooth",block:"start"})}})});window.addEventListener("scroll",function(){if(window.scrollY>100){nav.classList.add("scrolled")}else{nav.classList.remove("scrolled")}})}function initializeBookingModal(){const modal=document.getElementById("bookingModal");const bookBtns=document.querySelectorAll(".book-now-btn");const closeBtn=modal.querySelector(".close");bookBtns.forEach(btn=>{btn.addEventListener("click",function(e){e.preventDefault();modal.style.display="block";document.body.style.overflow="hidden"})});closeBtn.addEventListener("click",function(){modal.style.display="none";document.body.style.overflow="auto"});window.addEventListener("click",function(e){if(e.target===modal){modal.style.display="none";document.body.style.overflow="auto"}})}function initializeAuthModal(){const authModal=document.getElementById("authModal");const loginLogoutBtn=document.getElementById("loginLogoutBtn");const authModalCloseBtn=authModal.querySelector(".close");const authModalTitle=document.getElementById("authModalTitle");const loginForm=document.getElementById("loginForm");const registerForm=document.getElementById("registerForm");const forgotPasswordForm=document.getElementById("forgotPasswordForm");const showRegisterFormLink=document.getElementById("showRegisterForm");const showLoginFormLink=document.getElementById("showLoginForm");const forgotPasswordLink=document.getElementById("forgotPasswordLink");const backToLoginLink=document.getElementById("backToLogin");loginLogoutBtn.addEventListener("click",function(e){e.preventDefault();if(loginLogoutBtn.textContent==="Logout"){handleLogout()}else{authModal.style.display="block";document.body.style.overflow="hidden";showForm("login")}});authModalCloseBtn.addEventListener("click",function(){authModal.style.display="none";document.body.style.overflow="auto"});window.addEventListener("click",function(e){if(e.target===authModal){authModal.style.display="none";document.body.style.overflow="auto"}});showRegisterFormLink.addEventListener("click",function(e){e.preventDefault();showForm("register")});showLoginFormLink.addEventListener("click",function(e){e.preventDefault();showForm("login")});forgotPasswordLink.addEventListener("click",function(e){e.preventDefault();showForm("forgotPassword")});backToLoginLink.addEventListener("click",function(e){e.preventDefault();showForm("login")});function showForm(formType){loginForm.classList.add("hidden");registerForm.classList.add("hidden");forgotPasswordForm.classList.add("hidden");if(formType==="login"){loginForm.classList.remove("hidden");authModalTitle.textContent="Login to Your Account"}else if(formType==="register"){registerForm.classList.remove("hidden");authModalTitle.textContent="Create New Account"}else if(formType==="forgotPassword"){forgotPasswordForm.classList.remove("hidden");authModalTitle.textContent="Reset Your Password"}}loginForm.addEventListener("submit",async function(e){e.preventDefault();const email=loginForm.elements.loginEmail.value;const password=loginForm.elements.loginPassword.value;try{const response=await fetch(`${API_BASE_URL}/auth/login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:email,password:password})});const data=await response.json();if(response.ok){localStorage.setItem("accessToken",data.session.access_token);localStorage.setItem("refreshToken",data.session.refresh_token);localStorage.setItem("user",JSON.stringify(data.user));alert("Login successful!");authModal.style.display="none";document.body.style.overflow="auto";checkLoginStatus()}else{alert(`Login failed: ${data.error||data.message}`)}}catch(error){console.error("Login error:",error);alert("An error occurred during login.")}});registerForm.addEventListener("submit",async function(e){e.preventDefault();const firstName=registerForm.elements.registerFirstName.value;const lastName=registerForm.elements.registerLastName.value;const email=registerForm.elements.registerEmail.value;const password=registerForm.elements.registerPassword.value;try{const response=await fetch(`${API_BASE_URL}/auth/register`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({first_name:firstName,last_name:lastName,email:email,password:password})});const data=await response.json();if(response.ok){alert("Registration successful! Please check your email for verification.");showForm("login")}else{alert(`Registration failed: ${data.error||data.message}`)}}catch(error){console.error("Registration error:",error);alert("An error occurred during registration.")}});forgotPasswordForm.addEventListener("submit",async function(e){e.preventDefault();const email=forgotPasswordForm.elements.forgotEmail.value;try{const response=await fetch(`${API_BASE_URL}/auth/forgot-password`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:email})});const data=await response.json();if(response.ok){alert("Password reset link sent to your email!");showForm("login")}else{alert(`Password reset failed: ${data.error||data.message}`)}}catch(error){console.error("Forgot password error:",error);alert("An error occurred.")}})}async function checkLoginStatus(){const loginLogoutBtn=document.getElementById("loginLogoutBtn");const accessToken=localStorage.getItem("accessToken");const user=localStorage.getItem("user");if(accessToken&&user){try{const response=await fetch(`${API_BASE_URL}/auth/profile`,{method:"GET",headers:{Authorization:`Bearer ${accessToken}`}});if(response.ok){const userData=await response.json();loginLogoutBtn.textContent=`Logout (${userData.user.first_name})`;loginLogoutBtn.classList.add("logged-in");localStorage.setItem("user",JSON.stringify(userData.user))}else{await refreshAccessToken();const newAccessToken=localStorage.getItem("accessToken");if(newAccessToken){const retryResponse=await fetch(`${API_BASE_URL}/auth/profile`,{method:"GET",headers:{Authorization:`Bearer ${newAccessToken}`}});if(retryResponse.ok){const userData=await retryResponse.json();loginLogoutBtn.textContent=`Logout (${userData.user.first_name})`;loginLogoutBtn.classList.add("logged-in");localStorage.setItem("user",JSON.stringify(userData.user))}else{handleLogout(false)}}else{handleLogout(false)}}}catch(error){console.error("Error checking login status:",error);handleLogout(false)}}else{handleLogout(false)}}async function handleLogout(callApi=true){const loginLogoutBtn=document.getElementById("loginLogoutBtn");const accessToken=localStorage.getItem("accessToken");if(callApi&&accessToken){try{await fetch(`${API_BASE_URL}/auth/logout`,{method:"POST",headers:{Authorization:`Bearer ${accessToken}`}})}catch(error){console.error("Logout API call failed:",error)}}localStorage.removeItem("accessToken");localStorage.removeItem("refreshToken");localStorage.removeItem("user");loginLogoutBtn.textContent="Login";loginLogoutBtn.classList.remove("logged-in");alert("You have been logged out.")}async function refreshAccessToken(){const refreshToken=localStorage.getItem("refreshToken");if(!refreshToken)return false;try{const response=await fetch(`${API_BASE_URL}/auth/refresh`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({refresh_token:refreshToken})});const data=await response.json();if(response.ok){localStorage.setItem("accessToken",data.session.access_token);localStorage.setItem("refreshToken",data.session.refresh_token);return true}else{console.error("Failed to refresh token:",data.error||data.message);return false}}catch(error){console.error("Network error during token refresh:",error);return false}}function initializeCalendar(){const currentDate=new Date;let selectedDate=null;let selectedTime=null;renderCalendar(currentDate);function renderCalendar(date){const calendarGrid=document.querySelector(".calendar-grid");const monthYear=document.querySelector(".month-year");if(!calendarGrid||!monthYear)return;const year=date.getFullYear();const month=date.getMonth();monthYear.textContent=`${date.toLocaleDateString("en-US",{month:"long",year:"numeric"})}`;calendarGrid.innerHTML="";const dayHeaders=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];dayHeaders.forEach(day=>{const dayHeader=document.createElement("div");dayHeader.className="calendar-day-header";dayHeader.textContent=day;dayHeader.style.fontWeight="bold";dayHeader.style.backgroundColor="var(--primary-green)";dayHeader.style.color="white";calendarGrid.appendChild(dayHeader)});const firstDay=new Date(year,month,1).getDay();const daysInMonth=new Date(year,month+1,0).getDate();for(let i=0;i<firstDay;i++){const emptyDay=document.createElement("div");emptyDay.className="calendar-day empty";calendarGrid.appendChild(emptyDay)}for(let day=1;day<=daysInMonth;day++){const dayElement=document.createElement("div");dayElement.className="calendar-day";dayElement.textContent=day;const dayDate=new Date(year,month,day);const today=new Date;if(dayDate<today.setHours(0,0,0,0)){dayElement.classList.add("disabled");dayElement.style.opacity="0.5";dayElement.style.cursor="not-allowed"}else{dayElement.addEventListener("click",async function(){document.querySelectorAll(".calendar-day.selected").forEach(el=>{el.classList.remove("selected")});this.classList.add("selected");selectedDate=new Date(year,month,day);await fetchTimeSlots(selectedDate)})}calendarGrid.appendChild(dayElement)}}async function fetchTimeSlots(date){const timeSlotsContainer=document.querySelector(".time-slots");if(!timeSlotsContainer)return;timeSlotsContainer.innerHTML="<p>Loading available times...</p>";try{const formattedDate=date.toISOString().split("T")[0];const response=await fetch(`${API_BASE_URL}/bookings/availability?date=${formattedDate}`);const data=await response.json();if(response.ok){timeSlotsContainer.innerHTML="";if(data.time_slots&&data.time_slots.length>0){data.time_slots.forEach(slot=>{const timeSlot=document.createElement("div");timeSlot.className="time-slot";timeSlot.textContent=slot.time;if(!slot.available){timeSlot.classList.add("unavailable")}else{timeSlot.addEventListener("click",function(){document.querySelectorAll(".time-slot.selected").forEach(el=>{el.classList.remove("selected")});this.classList.add("selected");selectedTime=slot.time})}timeSlotsContainer.appendChild(timeSlot)})}else{timeSlotsContainer.innerHTML="<p>No tee times available for this date.</p>"}}else{timeSlotsContainer.innerHTML=`<p>Error fetching times: ${data.error||data.message}</p>`}}catch(error){console.error("Error fetching time slots:",error);timeSlotsContainer.innerHTML="<p>Failed to load tee times. Please try again later.</p>"}}document.querySelector(".prev-month")?.addEventListener("click",function(){currentDate.setMonth(currentDate.getMonth()-1);renderCalendar(currentDate)});document.querySelector(".next-month")?.addEventListener("click",function(){currentDate.setMonth(currentDate.getMonth()+1);renderCalendar(currentDate)});document.querySelector(".booking-form")?.addEventListener("submit",async function(e){e.preventDefault();if(!selectedDate||!selectedTime){alert("Please select a date and time for your tee time.");return}const formData=new FormData(this);const bookingData={booking_date:selectedDate.toISOString().split("T")[0],tee_time:selectedTime,number_of_players:parseInt(formData.get("players")),primary_player_name:formData.get("name"),primary_player_email:formData.get("email"),primary_player_phone:formData.get("phone"),cart_rental:formData.get("cart")==="yes",green_fee_type:"all_day"};const accessToken=localStorage.getItem("accessToken");const headers={"Content-Type":"application/json"};if(accessToken){headers["Authorization"]=`Bearer ${accessToken}`}try{const response=await fetch(`${API_BASE_URL}/bookings`,{method:"POST",headers:headers,body:JSON.stringify(bookingData)});const data=await response.json();if(response.ok){alert(`Booking confirmed for ${bookingData.primary_player_name} on ${bookingData.booking_date} at ${bookingData.tee_time}!`);if(data.payment_required){alert("Payment is required for this booking. (Payment integration coming soon!)")}document.getElementById("bookingModal").style.display="none";document.body.style.overflow="auto";this.reset();selectedDate=null;selectedTime=null;document.querySelectorAll(".calendar-day.selected, .time-slot.selected").forEach(el=>{el.classList.remove("selected")})}else{alert(`Booking failed: ${data.error||data.message}`)}}catch(error){console.error("Booking submission error:",error);alert("An error occurred during booking. Please try again.")}})}function initializeContactForm(){const contactForm=document.querySelector(".contact-form form");if(contactForm){contactForm.addEventListener("submit",async function(e){e.preventDefault();const formData=new FormData(this);const contactData={name:formData.get("name"),email:formData.get("email"),subject:formData.get("subject"),message:formData.get("message"),message_type:formData.get("subject")};try{const response=await fetch(`${API_BASE_URL}/contact`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(contactData)});const data=await response.json();if(response.ok){alert("Thank you for your message! We will get back to you soon.");this.reset()}else{alert(`Failed to send message: ${data.error||data.message}`)}}catch(error){console.error("Contact form submission error:",error);alert("An error occurred while sending your message. Please try again.")}})}}function initializeAnimations(){const observerOptions={threshold:.1,rootMargin:"0px 0px -50px 0px"};const observer=new IntersectionObserver(function(entries){entries.forEach(entry=>{if(entry.isIntersecting){entry.target.classList.add("fade-in");observer.unobserve(entry.target)}})},observerOptions);document.querySelectorAll(".section").forEach(section=>{observer.observe(section)});document.querySelectorAll(".feature-card").forEach(card=>{observer.observe(card)});document.querySelectorAll(".pricing-card").forEach(card=>{observer.observe(card)})}function initializeScrollEffects(){window.addEventListener("scroll",function(){const nav=document.querySelector(".header");if(window.scrollY>100){nav.classList.add("scrolled")}else{nav.classList.remove("scrolled")}})}